#!/usr/bin/env node

// TODO: check arguments better or use tj's commander
var opt = process.argv[2]
  , dev = opt ? (opt === '-dev') : false
  , Glue = require('gluejs')
  , fs = require('fs')
  , jade = require('jade')
  , jadeRe = new RegExp('(.+)\\.jade$'); // re for jade template files

var glue = new Glue()
  .basepath('../client') // perform all lookups from the dir
  .include('../client')  // includes all files in the dir
  .handler(jadeRe, function(opts, done) {
    var filename = opts.filename
      , tpl = jade.compile(fs.readFileSync(filename, 'utf8'), {
            client: true
          , filename: filename
          , compileDebug: false
        })
      , template = 'module.exports = ' + tpl + ';';
    
    done(filename.replace(jadeRe, '$1.js'), template);
  }) // custom handler for (pre)compiling jade templates
  .replace({
    'socket.io': 'window.io',
    'jquery': 'window.$', // binds require('jquery') to window.$
    'underscore': 'window._',
    'Backbone': 'window.Backbone',
    'audiolib': 'window.audioLib'
  })
  .export('jasmed') // the package is output as window.jasmed
  
  
if (dev) {
  glue
    .set('debug', true) // source maps support!
    .watch(function (err, txt) {
      fs.writeFile('./public/javascripts/jasmed.js', txt);
    });
} else {
  glue
    .render(function (err, txt) {
      fs.writeFile('./public/javascripts/jasmed.js', txt);
    });
}
